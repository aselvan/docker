#
# haproxy.cfg
#
# Description: 
#   Simple haproxy to do SNI based routing. This will accept https call, terminate it, and 
#   turn around and make https call forcing TLS1.2 and the specified cipher list to the 
#   backend hosts based on SNI.
#
# SSL Cert:
#   The 'sample' self-signed cert used is created as follows, replace it w/ yours ofcourse!
#
#   # create the cert and private key
#   openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -keyout sample.crt.key -out sample.crt
#   
#   # get csr (for signing later with a certified authority)
#   openssl req -new -key sample.crt.key -out server.csr
#
# Author:  Arul Selvan
# Version: Sep 5, 2019
#

global
  daemon
  log stdout format raw local0
  ssl-server-verify none
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private
  ssl-default-server-ciphers ECDH+AES128:DH+AES128:DH+AES256
  ssl-default-server-options force-tlsv12

defaults
  mode http
  log global
  maxconn 4096
  timeout connect 5000
  timeout client  50000
  timeout server  50000

# NOTE: Use a different resolver ONLY if the default DNS on the LAN will point to 
# this proxy. Using a separate proxy avoids circular loop. The other problem is 
# if the target has multiple IPs for RR, then don't use resolver.
resolvers mydns
  nameserver dns1 8.8.8.8:53
  nameserver dns2 1.1.1.1:53

# --------- front-end (accept tls any version) -------------
frontend https-in
  bind *:443 ssl crt /etc/ssl/certs/server.crt
  
  # example routing: change the definition to match your needs.

  # SNI routing 
  use_backend google.com     if { hdr(host) -i www.google.com }
  use_backend yahoo.com      if { hdr(host) -i www.yahoo.com }
  use_backend amazon.com     if { hdr(host) -i www.amazon.com }

  # default for falling back [change to your default]
  #default_backend default_backend

  # for testing w/ browser on localhost since we can't force a SNI
  use_backend default_backend if { hdr(host) -i localhost }

# --------- back-end(s) start here ----------------
backend google.com
  http-request set-header Host www.google.com
  #server target www.google.com ssl resolvers mydns
  server target www.google.com ssl

backend yahoo.com
  http-request set-header Host www.yahoo.com  
  #server target www.yahoo.com ssl resolvers mydns
  server target www.yahoo.com ssl 

backend amazon.com
  http-request set-header Host www.amazon.com  
  #server target www.amazon.com ssl resolvers mydns
  server target www.amazon.com ssl

# --- the default block if nothing matched [change to your default]
backend default_backend
  http-request set-header Host www.google.com
  server target www.google.com ssl
